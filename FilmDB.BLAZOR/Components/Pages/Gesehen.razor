@page "/gesehen"
@using FilmDB.BLAZOR.Models
@using FilmDB.BLAZOR.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using DevExpress.Blazor
@using DevExpress.Blazor.Internal
@using DevExpress.Blazor.Base
@using DevExpress.Blazor.Grid
@using DevExpress.Blazor.Primitives
@using DevExpress.Blazor.Office
@inject FilmDBService FilmDBService
@inject NavigationManager NavigationManager

<PageTitle>Gesehene Filme</PageTitle>

<CascadingAuthenticationState>
    <DxCard>
        <DxCardHeader>
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Gesehene Filme &amp; Serien</h5>
                <AuthorizeView>
                    <Authorized>
                        <DxButton Text="Neuen Film erfassen"
                                 IconCssClass="bi bi-plus-circle"
                                 Click="@AddFilm"
                                 RenderStyle="ButtonRenderStyle.Primary" />
                    </Authorized>
                </AuthorizeView>
            </div>
        </DxCardHeader>
        <DxCardBody>
            @if (filme == null)
            {
                <div class="text-center py-4">
                    <DxProgressBar />
                </div>
            }
            else if (!filme.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> Keine Filme vorhanden.
                </div>
            }
            else
            {
                <AuthorizeView>
                    <Authorized>
                        <DxGrid Data="@filme.OrderByDescending(f => f.GesehenAm)"
                               ShowFilterRow="true"
                               ShowPager="true"
                               PageSize="20"
                               CssClass="table-hover">
                            <Columns>
                                <DxGridDataColumn Caption="Titel" FieldName="@nameof(GesehenModel.Titel)" />
                                <DxGridDataColumn Caption="Gesehen am" FieldName="@nameof(GesehenModel.GesehenAm)">
                                    <CellDisplayTemplate Context="cellContext">
                                        @{
                                            var film = ((cellContext as GridDataColumnCellDisplayTemplateContext)?.DataItem as GesehenModel);
                                            @(film?.GesehenAm.ToShortDateString() ?? "-")
                                        }
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Caption="Bewertung" FieldName="@nameof(GesehenModel.Bewertung)">
                                    <CellDisplayTemplate Context="cellContext">
                                        @{
                                            var film = ((cellContext as GridDataColumnCellDisplayTemplateContext)?.DataItem as GesehenModel);
                                            if (film != null)
                                            {
                                                @for (int i = 0; i < film.Bewertung; i++)
                                                {
                                                    <i class="bi bi-star-fill text-warning"></i>
                                                }
                                                @for (int i = film.Bewertung; i < 5; i++)
                                                {
                                                    <i class="bi bi-star text-muted"></i>
                                                }
                                            }
                                        }
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Caption="Sender" FieldName="GesehenBei.Sendername" />
                                <DxGridDataColumn Caption="Kommentar" FieldName="@nameof(GesehenModel.Kommentar)" />
                                <DxGridDataColumn Caption="Aktionen" Width="120px">
                                    <CellDisplayTemplate Context="cellContext">
                                        @{
                                            var film = ((cellContext as GridDataColumnCellDisplayTemplateContext)?.DataItem as GesehenModel);
                                            if (film != null)
                                            {
                                                <div class="d-flex justify-content-end gap-2">
                                                    <DxButton RenderStyle="ButtonRenderStyle.Secondary"
                                                             RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                             IconCssClass="bi bi-pencil"
                                                             Click="@(() => EditFilm(film))"
                                                             title="Bearbeiten"
                                                             SizeMode="SizeMode.Small" />
                                                    <DxButton RenderStyle="ButtonRenderStyle.Danger"
                                                             RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                             IconCssClass="bi bi-trash"
                                                             Click="@(() => DeleteFilm(film))"
                                                             title="Löschen"
                                                             SizeMode="SizeMode.Small" />
                                                </div>
                                            }
                                        }
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                            </Columns>
                        </DxGrid>
                    </Authorized>
                    <NotAuthorized>
                        <DxGrid Data="@filme.OrderByDescending(f => f.GesehenAm)"
                               ShowFilterRow="true"
                               ShowPager="true"
                               PageSize="20"
                               CssClass="table-hover">
                            <Columns>
                                <DxGridDataColumn Caption="Titel" FieldName="@nameof(GesehenModel.Titel)" />
                                <DxGridDataColumn Caption="Gesehen am" FieldName="@nameof(GesehenModel.GesehenAm)">
                                    <CellDisplayTemplate Context="cellContext">
                                        @{
                                            var film = ((cellContext as GridDataColumnCellDisplayTemplateContext)?.DataItem as GesehenModel);
                                            @(film?.GesehenAm.ToShortDateString() ?? "-")
                                        }
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Caption="Bewertung" FieldName="@nameof(GesehenModel.Bewertung)">
                                    <CellDisplayTemplate Context="cellContext">
                                        @{
                                            var film = ((cellContext as GridDataColumnCellDisplayTemplateContext)?.DataItem as GesehenModel);
                                            if (film != null)
                                            {
                                                @for (int i = 0; i < film.Bewertung; i++)
                                                {
                                                    <i class="bi bi-star-fill text-warning"></i>
                                                }
                                                @for (int i = film.Bewertung; i < 5; i++)
                                                {
                                                    <i class="bi bi-star text-muted"></i>
                                                }
                                            }
                                        }
                                    </CellDisplayTemplate>
                                </DxGridDataColumn>
                                <DxGridDataColumn Caption="Sender" FieldName="GesehenBei.Sendername" />
                                <DxGridDataColumn Caption="Kommentar" FieldName="@nameof(GesehenModel.Kommentar)" />
                            </Columns>
                        </DxGrid>
                    </NotAuthorized>
                </AuthorizeView>
            }
        </DxCardBody>
    </DxCard>
</CascadingAuthenticationState>

<DxPopup @bind-Visible="@showDeleteDialog"
         HeaderText="Film löschen"
         ShowFooter="true">
    <BodyTemplate>
        <p>Möchten Sie diesen Film wirklich löschen?</p>
    </BodyTemplate>
    <FooterTemplate>
        <DxButton Text="Ja"
                  RenderStyle="ButtonRenderStyle.Danger"
                  Click="@ConfirmDelete" />
        <DxButton Text="Nein"
                  RenderStyle="ButtonRenderStyle.Secondary"
                  Click="@(() => showDeleteDialog = false)" />
    </FooterTemplate>
</DxPopup>

@code {
    private List<GesehenModel>? filme;
    private bool showDeleteDialog;
    private GesehenModel? filmToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        filme = await FilmDBService.GetGesehenAsync();
    }

    private void EditFilm(GesehenModel film)
    {
        NavigationManager.NavigateTo($"film-bearbeiten/{film.ID}");
    }

    private void DeleteFilm(GesehenModel film)
    {
        filmToDelete = film;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (filmToDelete != null)
        {
            try
            {
                await FilmDBService.DeleteGesehenAsync(filmToDelete.ID);
                if (filme != null)
                {
                    filme.Remove(filmToDelete);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fehler beim Löschen: {ex.Message}");
                await LoadData();
            }
        }
        showDeleteDialog = false;
    }

    private void AddFilm()
    {
        NavigationManager.NavigateTo("film-hinzufuegen");
    }
} 