@page "/sender"
@using FilmDB.BLAZOR.Models
@using FilmDB.BLAZOR.Services
@using Microsoft.AspNetCore.Authorization
@inject FilmDBService FilmDBService

@attribute [Authorize]

<PageTitle>Sender verwalten</PageTitle>

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">@(editMode ? "Sender bearbeiten" : "Neuen Sender hinzufügen")</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@senderModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="sendername" class="form-label">Sendername</label>
                                <InputText id="sendername" class="form-control" @bind-Value="senderModel.Sendername" placeholder="Name des Senders eingeben..." />
                                <ValidationMessage For="@(() => senderModel.Sendername)" />
                            </div>
                        </div>
                        <div class="col-md-4 d-flex align-items-end gap-2">
                            <button type="submit" class="btn btn-primary flex-grow-1 mb-3">
                                <i class="bi @(editMode ? "bi-check-circle" : "bi-plus-circle") me-2"></i>
                                @(editMode ? "Änderungen speichern" : "Sender hinzufügen")
                            </button>
                            @if (editMode)
                            {
                                <button type="button" class="btn btn-outline-secondary mb-3" @onclick="CancelEdit">
                                    <i class="bi bi-x-circle me-2"></i>Abbrechen
                                </button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Vorhandene Sender</h5>
            </div>
            <div class="card-body">
                @if (senderList == null)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Laden...</span>
                        </div>
                    </div>
                }
                else if (!senderList.Any())
                {
                    <div class="alert alert-info" role="alert">
                        <i class="bi bi-info-circle me-2"></i>Keine Sender vorhanden.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th class="text-end">Aktionen</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var s in senderList.OrderBy(s => s.Sendername))
                                {
                                    <tr>
                                        <td>@s.Sendername</td>
                                        <td class="text-end">
                                            <button class="btn btn-sm btn-outline-primary me-2" title="Bearbeiten" @onclick="@(e => EditSender(s))">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" title="Löschen" @onclick="@(e => DeleteSender(s))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<SenderModel>? senderList;
    private SenderModel senderModel = new();
    private bool editMode;

    protected override async Task OnInitializedAsync()
    {
        await LoadSenderList();
    }

    private async Task LoadSenderList()
    {
        senderList = await FilmDBService.GetSenderAsync();
        StateHasChanged();
    }

    private void EditSender(SenderModel sender)
    {
        editMode = true;
        senderModel = new SenderModel
        {
            ID = sender.ID,
            Sendername = sender.Sendername
        };
    }

    private void CancelEdit()
    {
        editMode = false;
        senderModel = new();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editMode)
            {
                var updatedSender = await FilmDBService.UpdateSenderAsync(senderModel);
                if (senderList != null)
                {
                    var index = senderList.FindIndex(s => s.ID == updatedSender.ID);
                    if (index != -1)
                    {
                        senderList[index] = updatedSender;
                    }
                }
                editMode = false;
            }
            else
            {
                var newSender = await FilmDBService.CreateSenderAsync(senderModel);
                senderList?.Add(newSender);
            }
            senderModel = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Speichern: {ex.Message}");
            await LoadSenderList(); // Bei Fehler komplette Liste neu laden
        }
    }

    private async Task DeleteSender(SenderModel sender)
    {
        try
        {
            await FilmDBService.DeleteSenderAsync(sender.ID);
            await LoadSenderList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Löschen: {ex.Message}");
        }
    }
} 