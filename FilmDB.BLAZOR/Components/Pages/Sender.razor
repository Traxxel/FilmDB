@page "/sender"
@using FilmDB.BLAZOR.Models
@using FilmDB.BLAZOR.Services
@using Microsoft.AspNetCore.Authorization
@using DevExpress.Blazor
@inject FilmDBService FilmDBService

@attribute [Authorize]

<PageTitle>Sender verwalten</PageTitle>

<DxCard>
    <DxCardHeader>
        <h5 class="mb-0">@(editMode ? "Sender bearbeiten" : "Neuen Sender hinzufügen")</h5>
    </DxCardHeader>
    <DxCardBody>
        <EditForm Model="@senderModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-8">
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Sendername" ColSpanMd="12">
                            <Template Context="formLayoutContext">
                                <DxTextBox @bind-Text="@senderModel.Sendername"
                                         ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"
                                         NullText="Name des Senders eingeben..." />
                                <ValidationMessage For="@(() => senderModel.Sendername)" />
                            </Template>
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </div>
                <div class="col-md-4 d-flex align-items-end gap-2">
                    <DxButton Text="@(editMode ? "Änderungen speichern" : "Sender hinzufügen")"
                             IconCssClass="@(editMode ? "bi bi-check-circle" : "bi bi-plus-circle")"
                             SubmitFormOnClick="true"
                             RenderStyle="ButtonRenderStyle.Primary"
                             CssClass="flex-grow-1" />
                    @if (editMode)
                    {
                        <DxButton Text="Abbrechen"
                                 IconCssClass="bi bi-x-circle"
                                 Click="@CancelEdit"
                                 RenderStyle="ButtonRenderStyle.Secondary"
                                 RenderStyleMode="ButtonRenderStyleMode.Outline" />
                    }
                </div>
            </div>
        </EditForm>
    </DxCardBody>
</DxCard>

<DxCard CssClass="mt-4">
    <DxCardHeader>
        <h5 class="mb-0">Vorhandene Sender</h5>
    </DxCardHeader>
    <DxCardBody>
        @if (senderList == null)
        {
            <div class="text-center py-4">
                <DxLoadingIndicator />
            </div>
        }
        else if (!senderList.Any())
        {
            <DxAlert IconCssClass="bi bi-info-circle">
                Keine Sender vorhanden.
            </DxAlert>
        }
        else
        {
            <DxGrid Data="@senderList.OrderBy(s => s.Sendername)"
                    ShowFilterRow="true"
                    ShowPager="true"
                    PageSize="10"
                    CssClass="table-hover">
                <Columns>
                    <DxGridDataColumn Caption="Name" FieldName="@nameof(SenderModel.Sendername)" />
                    <DxGridDataColumn Caption="Aktionen" Width="120px">
                        <CellDisplayTemplate Context="context">
                            @{
                                var sender = (context.DataItem as SenderModel);
                                if (sender != null)
                                {
                                    <div class="d-flex justify-content-end gap-2">
                                        <DxButton RenderStyle="ButtonRenderStyle.Secondary"
                                                 RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                 IconCssClass="bi bi-pencil"
                                                 Click="@(() => EditSender(sender))"
                                                 title="Bearbeiten"
                                                 SizeMode="SizeMode.Small" />
                                        <DxButton RenderStyle="ButtonRenderStyle.Danger"
                                                 RenderStyleMode="ButtonRenderStyleMode.Outline"
                                                 IconCssClass="bi bi-trash"
                                                 Click="@(() => DeleteSender(sender))"
                                                 title="Löschen"
                                                 SizeMode="SizeMode.Small" />
                                    </div>
                                }
                            }
                        </CellDisplayTemplate>
                    </DxGridDataColumn>
                </Columns>
            </DxGrid>
        }
    </DxCardBody>
</DxCard>

<DxPopup @bind-Visible="@showDeleteDialog"
         HeaderText="Sender löschen"
         ShowFooter="true">
    <BodyTemplate>
        <p>Möchten Sie diesen Sender wirklich löschen?</p>
    </BodyTemplate>
    <FooterTemplate>
        <DxButton Text="Ja"
                  RenderStyle="ButtonRenderStyle.Danger"
                  Click="@ConfirmDelete" />
        <DxButton Text="Nein"
                  RenderStyle="ButtonRenderStyle.Secondary"
                  Click="@(() => showDeleteDialog = false)" />
    </FooterTemplate>
</DxPopup>

@code {
    private List<SenderModel>? senderList;
    private SenderModel senderModel = new();
    private bool editMode;
    private bool showDeleteDialog;
    private SenderModel? senderToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadSenderList();
    }

    private async Task LoadSenderList()
    {
        senderList = await FilmDBService.GetSenderAsync();
        StateHasChanged();
    }

    private void EditSender(SenderModel sender)
    {
        editMode = true;
        senderModel = new SenderModel
        {
            ID = sender.ID,
            Sendername = sender.Sendername
        };
    }

    private void CancelEdit()
    {
        editMode = false;
        senderModel = new();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editMode)
            {
                var updatedSender = await FilmDBService.UpdateSenderAsync(senderModel);
                if (senderList != null)
                {
                    var index = senderList.FindIndex(s => s.ID == updatedSender.ID);
                    if (index != -1)
                    {
                        senderList[index] = updatedSender;
                    }
                }
                editMode = false;
            }
            else
            {
                var newSender = await FilmDBService.CreateSenderAsync(senderModel);
                senderList?.Add(newSender);
            }
            senderModel = new();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Speichern: {ex.Message}");
            await LoadSenderList();
        }
    }

    private void DeleteSender(SenderModel sender)
    {
        senderToDelete = sender;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (senderToDelete != null)
        {
            try
            {
                await FilmDBService.DeleteSenderAsync(senderToDelete.ID);
                if (senderList != null)
                {
                    senderList.Remove(senderToDelete);
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fehler beim Löschen: {ex.Message}");
                await LoadSenderList();
            }
        }
        showDeleteDialog = false;
    }
} 