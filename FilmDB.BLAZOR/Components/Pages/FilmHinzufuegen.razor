@page "/film-hinzufuegen"
@using FilmDB.BLAZOR.Models
@using FilmDB.BLAZOR.Services
@using Microsoft.AspNetCore.Authorization
@inject FilmDBService FilmDBService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Film hinzufügen</PageTitle>

<style>
    .rating {
        display: inline-flex;
        flex-direction: row-reverse;
        gap: 0.3rem;
    }

    .rating .star {
        cursor: pointer;
        font-size: 1.5rem;
        color: #ccc;
        transition: color 0.2s ease;
    }

    .rating .star.active,
    .rating .star:hover,
    .rating .star:hover ~ .star {
        color: #ffc107;
    }
</style>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Neuen Film erfassen</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@neuerFilm" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="titel" class="form-label">Titel</label>
                                <InputText id="titel" class="form-control" @bind-Value="neuerFilm.Titel" placeholder="Filmtitel eingeben..." />
                                <ValidationMessage For="@(() => neuerFilm.Titel)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="gesehenAm" class="form-label">Gesehen am</label>
                                <InputDate id="gesehenAm" class="form-control" @bind-Value="neuerFilm.GesehenAm" />
                                <ValidationMessage For="@(() => neuerFilm.GesehenAm)" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">Bewertung</label>
                                <div class="rating">
                                    @for (int i = 5; i >= 1; i--)
                                    {
                                        var rating = i;
                                        <i class="bi bi-star-fill star @(rating <= neuerFilm.Bewertung ? "active" : "")"
                                           @onclick="() => SetRating(rating)"
                                           @onmouseover="() => HoverRating = rating"
                                           @onmouseout="() => HoverRating = 0"></i>
                                    }
                                </div>
                                <ValidationMessage For="@(() => neuerFilm.Bewertung)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="sender" class="form-label">Sender</label>
                                <InputSelect id="sender" class="form-control" @bind-Value="neuerFilm.GesehenBeiID">
                                    <option value="">-- Sender auswählen --</option>
                                    @if (sender != null)
                                    {
                                        @foreach (var s in sender.OrderBy(s => s.Sendername))
                                        {
                                            <option value="@s.ID">@s.Sendername</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => neuerFilm.GesehenBeiID)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="kommentar" class="form-label">Kommentar</label>
                                <InputTextArea id="kommentar" class="form-control" @bind-Value="neuerFilm.Kommentar" rows="3" />
                            </div>
                        </div>
                    </div>

                    <div class="row mt-4">
                        <div class="col-12 text-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-circle me-2"></i>Film hinzufügen
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<SenderModel>? sender;
    private GesehenModel neuerFilm = new() { GesehenAm = DateTime.Today };
    private int HoverRating { get; set; }

    protected override async Task OnInitializedAsync()
    {
        sender = await FilmDBService.GetSenderAsync();
    }

    private void SetRating(int rating)
    {
        neuerFilm.Bewertung = rating;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await FilmDBService.CreateGesehenAsync(neuerFilm);
            neuerFilm = new() { GesehenAm = DateTime.Today };
            // Optional: Navigation zur Gesehen-Seite nach erfolgreichem Speichern
            // NavigationManager.NavigateTo("gesehen");
        }
        catch (Exception ex)
        {
            // Hier könnte eine Fehlerbehandlung implementiert werden
            Console.WriteLine($"Fehler beim Speichern: {ex.Message}");
        }
    }
} 